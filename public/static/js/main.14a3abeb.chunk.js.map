{"version":3,"sources":["components/ViewClub.js","components/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["ViewClub","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","Component","SearchPage","App","className","href","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAsBeA,cAjBd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,wEAQjB,OACCQ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,4BAZmBC,aC8BRC,cAjBd,SAAAA,EAAYb,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,IACjBZ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAW,GAAAN,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,wEAQjB,OACCQ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,4BAZqBC,iBCgCVE,cApCd,SAAAA,EAAYd,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IAClBb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,KAAMJ,KACDQ,MAAQ,GAFKP,wEAgBlB,OACCQ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,4BACdN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACdN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,cAAcC,KA3BnB,IA2BR,gBAEDP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,oBACdN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,UAAUC,KAAM,wBAA7B,aACAP,EAAAC,EAAAC,cAAA,KAAGI,UAAU,UAAUC,KAAM,2BAA7B,iBACAP,EAAAC,EAAAC,cAAA,KAAGI,UAAU,UAAUC,KAAM,8BAA7B,aAGFP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACCR,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,wBAAwBC,UAAWrB,IACrDU,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWP,aA/BzBD,aCCES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OACRlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACCnB,EAAAC,EAAAC,cAACkB,EAAD,OAECC,SAASC,eAAe,SDqHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14a3abeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n//TODO: Convert Pug clubview page to this\r\n\r\nclass ViewClub extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t\r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>View Club</h1>\r\n\t\t\t\t<p>Pee pee</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ViewClub;","import React, { Component } from 'react';\r\n\r\n/*\r\nTODO: When this component is called:\r\n\t*If there is a query string...\r\n\t\t*Parse it\r\n\t\t*Query the /searchData API with the query string data\r\n\t\t*Sort and present SearchItem components\r\n\t*If there isn't a query string, query the /searchData API for the user's default preferences\r\n\t\t\t*If they exist (the user is logged in and has configured his preferences), sort and present SearchItem components\r\n\t\t\t*If they don't exist, display a message with a link telling them to configure their preferences or put in a search\r\n\r\n\r\n*/\r\n\r\n\r\nclass SearchPage extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t\r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Search Page</h1>\r\n\t\t\t\t<p>Poo Poo</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchPage;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport ViewClub from './components/ViewClub';\nimport SearchPage from './components/SearchPage';\n\nlet DEV_URL = '';\n\nif (process.env.NODE_ENV === 'development') {\n\tDEV_URL = 'http://localhost:3000';\n}\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t//users: []\n\t\t};\n\t}\n\t/*async componentDidMount() {\n\t\t// Call self-hosted API to get users response\n\t\tconst res = await fetch(`${DEV_URL}/searchData`);\n\t\tconst users = await res.json();\n\t\tthis.setState({\n\t\t\tusers\n\t\t});\n\t}*/\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='navbar position-relative'>\n\t\t\t\t\t<div className='navcont navleft'>\n\t\t\t\t\t\t<a className='mainlogonav' href={DEV_URL}> clubsource</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='navcont navright'>\n\t\t\t\t\t\t<a className='navlink' href={'${DEV_URL}/dashboard'}>Dashboard</a>\n\t\t\t\t\t\t<a className='navlink' href={'${DEV_URL}/clubs/search'}> Browse Clubs</a>\n\t\t\t\t\t\t<a className='navlink' href={'${DEV_URL}/accounts/logout'}>Log Out</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/clubs/view/:username' component={ViewClub} />\n\t\t\t\t\t<Route exact path='/clubs' component={SearchPage} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n\nReactDOM.render((\n\t<Router>\n\t\t<App />\n\t</Router>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}