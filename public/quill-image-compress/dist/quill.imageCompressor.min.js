!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/dist/",i(i.s=0)}([function(e,t,i){"use strict";i.r(t),t.default=class{constructor(e,t){this.quill=e,this.options=t,this.range=null,this.debug=null==t.debug||1==t.debug,function(e){e.maxWidth&&"number"!=typeof e.maxWidth&&(console.warn(`[config error] 'maxWidth' is required to be a "number" (in pixels), \nrecieved: ${e.maxWidth}\n-> using default 1000`),e.maxWidth=1e3),e.quality&&"number"!=typeof e.quality&&(console.warn(`quill.imageCompressor: [config error] 'quality' is required to be a "number", \nrecieved: ${e.quality}\n-> using default 0.7`),e.quality=.7),!e.imageType||"string"==typeof e.imageType&&e.imageType.startsWith("image/")||(console.warn(`quill.imageCompressor: [config error] 'imageType' is required be in the form of "image/png" or "image/jpeg" etc ..., \nrecieved: ${e.imageType}\n-> using default image/jpeg`),e.imageType="image/jpeg")}(t),this.quill.getModule("toolbar").addHandler("image",this.selectLocalImage.bind(this))}selectLocalImage(){this.range=this.quill.getSelection(),this.fileHolder=document.createElement("input"),this.fileHolder.setAttribute("type","file"),this.fileHolder.setAttribute("accept","image/*"),this.fileHolder.setAttribute("style","visibility:hidden"),this.fileHolder.onchange=this.fileChanged.bind(this),document.body.appendChild(this.fileHolder),this.fileHolder.click(),window.requestAnimationFrame(()=>{document.body.removeChild(this.fileHolder)})}fileChanged(){const e=this.fileHolder.files[0];if(!e)return;const t=new FileReader;t.addEventListener("load",async()=>{const e=t.result,i=await async function(e,t,i,n,o){i=i||"image/jpeg",n=n||.7;const r=new Image;r.src=e,await new Promise(e=>{r.onload=(()=>{e()})});const a=r.width,l=r.height,s=Math.floor(l/a*t),d=document.createElement("canvas");d.width=t,d.height=s;const u=d.getContext("2d");u.drawImage(r,0,0,t,s);const g=d.toDataURL(i,n);return o&&console.log("quill.imageCompressor: downscaling image...",{args:{dataUrl:e,newWidth:t,imageType:i,imageQuality:n},image:r,oldWidth:a,oldHeight:l,newHeight:s,canvas:d,ctx:u,newDataUrl:g}),g}(e,this.options.maxWidth,this.options.imageType,this.options.quality,this.debug);this.insertToEditor(i)},!1),t.readAsDataURL(e)}insertToEditor(e){const t=this.range;this.logFileSize(e),this.quill.insertEmbed(t.index,"image",`${e}`),t.index++,this.quill.setSelection(t,"api")}logFileSize(e){const t=(Math.round(3*(e.length-"data:image/png;base64,".length)/4)/1024).toFixed(0);this.debug&&console.log("quill.imageCompressor: estimated img size: "+t+" kb")}}}]);